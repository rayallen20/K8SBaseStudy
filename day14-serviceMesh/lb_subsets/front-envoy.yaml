admin:
  access_log_path: "/dev/null"
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

static_resources:
  listeners:
  - address:
      socket_address: { address: 0.0.0.0, port_value: 80 }
    name: listener_http
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          codec_type: auto
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: backend
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/" 
                  headers:
                    # 若请求头中有字段x-custom-version
                    # 且该字段值为pre-release
                  - name: x-custom-version
                    exact_match: pre-release
                route:
                  cluster: webcluster1
                  metadata_match:
                    filter_metadata:
                      envoy.lb:
                        # 则将流量转发到 version为1.2-pre
                        # stage为dev的子集上
                        # 即:主机e7响应这些请求
                        version: "1.2-pre"
                        stage: "dev"
              - match:
                  prefix: "/"
                  headers:
                    # 若请求头中有字段x-hardware-test
                    # 且该字段值为memory
                  - name: x-hardware-test
                    exact_match: memory
                route:
                  cluster: webcluster1
                  metadata_match:
                    filter_metadata:
                      envoy.lb:
                        # 则将流量转发到 type为bigmem
                        # stage为prod的子集上
                        # 即:主机e5和e6响应这些请求
                        type: "bigmem"
                        stage: "prod"
              - match:
                  prefix: "/"
                route:
                  # 加权集群
                  # 即根据权重将该路由匹配到的流量分配到多个不同的集群上去
                  # 通常用于将一组流量分发到2个不同的版本上去
                  # 此处的加权和负载均衡中的加权目的不同
                  # 此处的加权目的是分割流量 负载均衡中的加权是为了调度流量
                  # 本例中是将匹配到的流量 分割到同一个集群中的2个不同子集上
                  weighted_clusters:
                    clusters:
                    - name: webcluster1
                      # 默认总权重为100 webcluster1权重为90
                      # 即90%的流量给webcluster1中version为1.0的子集中
                      # 再和路由中的元数据匹配(stage为prod)取交集
                      # 即:主机e1 e2 e5负责处理该路由匹配到的90%的流量
                      weight: 90
                      metadata_match:
                        filter_metadata:
                          envoy.lb:
                            version: "1.0"
                    - name: webcluster1
                      # 默认总权重为100 webcluster1权重为10
                      # 即10%的流量给webcluster1中version为1.1的子集中
                      # 再和路由中的元数据匹配(stage为prod)取交集
                      # 即:主机e3 e4 e6负责处理该路由匹配到的10%的流量
                      weight: 10
                      metadata_match:
                        filter_metadata:
                          envoy.lb:
                            version: "1.1"
                  # 将该路由匹配到的流量
                  # 转发到 stage为prod的子集上
                  # 但实际上并没有定义这个子集 
                  # 即lb_subset_config.subset_selectors中并没有定义
                  # 一个keys: ["stage"]
                  # 可以认为该路由匹配到的流量 在选择子集时
                  # 需要先满足 stage为prod 这一条件
                  # 再根据weighted_clusters中的匹配条件
                  # 进行子集筛选
                  # 即:此处的标签是加权集群的公共标签
                  metadata_match:
                    filter_metadata:
                      envoy.lb:
                        stage: "prod"
          http_filters:
          - name: envoy.filters.http.router

  clusters:
  - name: webcluster1
    connect_timeout: 0.5s
    type: STRICT_DNS
    # 流量在每个子集中的负载均衡策略
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: webcluster1
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: e1
                port_value: 80
          metadata:
            filter_metadata:
              envoy.lb:
                stage: "prod"
                version: "1.0"
                type: "std"
                xlarge: true
        - endpoint:
            address:
              socket_address:
                address: e2
                port_value: 80
          metadata:
            filter_metadata:
              envoy.lb:
                stage: "prod"
                version: "1.0"
                type: "std"
        - endpoint:
            address:
              socket_address:
                address: e3
                port_value: 80
          metadata:
            filter_metadata:
              envoy.lb:
                stage: "prod"
                version: "1.1"
                type: "std"
        - endpoint:
            address:
              socket_address:
                address: e4
                port_value: 80
          metadata:
            filter_metadata:
              envoy.lb:
                stage: "prod"
                version: "1.1"
                type: "std"
        - endpoint:
            address:
              socket_address:
                address: e5
                port_value: 80
          metadata:
            filter_metadata:
              envoy.lb:
                stage: "prod"
                version: "1.0"
                type: "bigmem"
        - endpoint:
            address:
              socket_address:
                address: e6
                port_value: 80
          metadata:
            filter_metadata:
              envoy.lb:
                stage: "prod"
                version: "1.1"
                type: "bigmem"
        - endpoint:
            address:
              socket_address:
                address: e7
                port_value: 80
          metadata:
            filter_metadata:
              envoy.lb:
                stage: "dev"
                version: "1.2-pre"
                type: "std"
    lb_subset_config:
      # 当没有匹配的子集时 使用默认子集
      fallback_policy: DEFAULT_SUBSET     
      # 定义默认子集
      # stage为prod
      # version为1.0
      # type为std
      # 即:主机e1 e2构成了默认子集
      default_subset:
        stage: "prod"
        version: "1.0"
        type: "std"
      subset_selectors:
      - keys: ["stage", "type"]
      - keys: ["stage", "version"]
      - keys: ["version"]
      - keys: ["xlarge", "version"]
    health_checks:
    - timeout: 5s
      interval: 10s
      unhealthy_threshold: 2
      healthy_threshold: 1
      http_health_check:
        path: /livez
        expected_statuses:
          start: 200
          end: 399
